package jp.co.wap.exam;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

import jp.co.wap.exam.lib.Interval;

public class Problem2 {
	/**
	 * The complexity of this method is O(n*logn)+O(n*logn)+O(n), the first
	 * O(n*logn) is used to perform merge sort, the second O(n*logn) is used to
	 * build the mutualIndex ( for each interval, perform a binary search), the
	 * last O(n) is used to find the MaxWorkingTime. The performance test case
	 * shows that this program takes 35~45 milliseconds to find the max working
	 * time in given 10,000 random generated intervals.
	 * 
	 * @param intervals
	 * @return max working time
	 */
	public int getMaxWorkingTime(List<Interval> intervals) {
		if (null == intervals || intervals.size() < 1)
			return 0;
		if (intervals.size() < 2) {
			return intervals.get(0).getIntervalMinute();
		}
		ArrayList<Interval> tempIntervals = new ArrayList<Interval>(intervals);
		Collections.sort(tempIntervals, Utils.endMinuteUnitComparator);
		int[] mutualIndex = buildMutuallyAscendingIndex(tempIntervals);
		return dynamicSolve(tempIntervals, mutualIndex);
	}

	/**
	 * This method performs dynamic programming approach to solve problem2, for
	 * each iteration, it calculates the max working time considering the
	 * intervals from 1 to i. Notice that an array is used to stored the max
	 * value of each sub-problem, thus the complexity of this method is O(N).
	 * 
	 * @param orderedIntervals
	 *            a list of intervals ordered by EndMinuteUnit.
	 * @param mutualRightIndex
	 *            array of index pointers generated by
	 *            buildMutuallyAscendingIndex()
	 * @return the result of problem2
	 */
	public int dynamicSolve(List<Interval> orderedIntervals,
			int[] mutualRightIndex) {
		int[] optSolutions = new int[orderedIntervals.size() + 1];
		for (int i = 1; i <= orderedIntervals.size(); i++) {
			int solutionOne = i - 1;
			int solutionTwo = mutualRightIndex[i - 1];
			optSolutions[i] = Math.max(optSolutions[solutionOne],
					optSolutions[solutionTwo]
							+ orderedIntervals.get(i - 1).getIntervalMinute());
		}
		return optSolutions[orderedIntervals.size()];
	}

	/**
	 * Build an index array, each item A points to the index (start from 1) of
	 * its nearest interval whose EndMinuteUnit <=
	 * orderedIntervals[A].getBeginMinuteUnit().
	 * 
	 * @param orderedIntervals
	 * @return an array of integers
	 */
	private int[] buildMutuallyAscendingIndex(List<Interval> orderedIntervals) {
		int[] result = new int[orderedIntervals.size()];
		for (int i = 0; i < orderedIntervals.size(); i++) {
			Interval current = orderedIntervals.get(i);
			result[i] = Utils.bisecRightID(orderedIntervals,
					current.getBeginMinuteUnit());
		}

		return result;
	}

}
